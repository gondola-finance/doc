(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),s=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,m=d["".concat(c,".").concat(u)]||d[u]||p[u]||o;return n?a.a.createElement(m,i(i({ref:t},b),{},{components:n})):a.a.createElement(m,i({ref:t},b))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var b=2;b<o;b++)c[b]=n[b];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},90:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),o=(n(0),n(112)),c={},i={unversionedId:"developers/contracts/LPToken",id:"developers/contracts/LPToken",isDocsHomePage:!1,title:"LPToken",description:"This token is an ERC20 detailed token with added capability to be minted by the owner.",source:"@site/docs/developers/contracts/LPToken.md",sourceDirName:"developers/contracts",slug:"/developers/contracts/LPToken",permalink:"/doc/docs/developers/contracts/LPToken",editUrl:"https://github.com/gondola-finance/doc/docs/developers/contracts/LPToken.md",version:"current",frontMatter:{},sidebar:"developers",previous:{title:"IMigratorChef",permalink:"/doc/docs/developers/contracts/IMigratorChef"},next:{title:"MasterChef",permalink:"/doc/docs/developers/contracts/MasterChef"}},l=[{value:"Functions",id:"functions",children:[{value:"constructor",id:"constructor",children:[]},{value:"mint",id:"mint",children:[]},{value:"_beforeTokenTransfer",id:"_beforetokentransfer",children:[]}]}],b={toc:l};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This token is an ERC20 detailed token with added capability to be minted by the owner.\nIt is used to represent user's shares when providing liquidity to swap contracts."),Object(o.b)("h2",{id:"functions"},"Functions"),Object(o.b)("h3",{id:"constructor"},"constructor"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-solidity"},"  function constructor(\n    string name_,\n    string symbol_,\n    uint8 decimals_\n  ) public\n")),Object(o.b)("p",null,"Deploys LPToken contract with given name, symbol, and decimals"),Object(o.b)("p",null,"the caller of this constructor will become the owner of this contract"),Object(o.b)("h4",{id:"parameters"},"Parameters:"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:"left"},"Name"),Object(o.b)("th",{parentName:"tr",align:"left"},"Type"),Object(o.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"name_")),Object(o.b)("td",{parentName:"tr",align:"left"},"string"),Object(o.b)("td",{parentName:"tr",align:"left"},"name of this token")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"symbol_")),Object(o.b)("td",{parentName:"tr",align:"left"},"string"),Object(o.b)("td",{parentName:"tr",align:"left"},"symbol of this token")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"decimals_")),Object(o.b)("td",{parentName:"tr",align:"left"},"uint8"),Object(o.b)("td",{parentName:"tr",align:"left"},"number of decimals this token will be based on")))),Object(o.b)("h3",{id:"mint"},"mint"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-solidity"},"  function mint(\n    address recipient,\n    uint256 amount\n  ) external\n")),Object(o.b)("p",null,"Mints the given amount of LPToken to the recipient."),Object(o.b)("p",null,"only owner can call this mint function"),Object(o.b)("h4",{id:"parameters-1"},"Parameters:"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:"left"},"Name"),Object(o.b)("th",{parentName:"tr",align:"left"},"Type"),Object(o.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"recipient")),Object(o.b)("td",{parentName:"tr",align:"left"},"address"),Object(o.b)("td",{parentName:"tr",align:"left"},"address of account to receive the tokens")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"amount")),Object(o.b)("td",{parentName:"tr",align:"left"},"uint256"),Object(o.b)("td",{parentName:"tr",align:"left"},"amount of tokens to mint")))),Object(o.b)("h3",{id:"_beforetokentransfer"},"_beforeTokenTransfer"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-solidity"},"  function _beforeTokenTransfer(\n  ) internal\n")),Object(o.b)("p",null,"Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\nminting and burning. This ensures that swap.updateUserWithdrawFees are called everytime."))}s.isMDXComponent=!0}}]);