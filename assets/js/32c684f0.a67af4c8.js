(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{111:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},b=Object.keys(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},f=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,b=e.originalType,c=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||b;return n?r.a.createElement(m,i(i({ref:t},o),{},{components:n})):r.a.createElement(m,i({ref:t},o))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var b=n.length,c=new Array(b);c[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var o=2;o<b;o++)c[o]=n[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),b=(n(0),n(111)),c={},i={unversionedId:"developers/contracts/MathUtils",id:"developers/contracts/MathUtils",isDocsHomePage:!1,title:"MathUtils",description:"A library to be used in conjunction with SafeMath. Contains functions for calculating",source:"@site/docs/developers/contracts/MathUtils.md",sourceDirName:"developers/contracts",slug:"/developers/contracts/MathUtils",permalink:"/docs/developers/contracts/MathUtils",editUrl:"https://github.com/gondola-finance/gondola-doc/docs/developers/contracts/MathUtils.md",version:"current",frontMatter:{},sidebar:"developers",previous:{title:"MasterChef",permalink:"/docs/developers/contracts/MasterChef"},next:{title:"OwnerPausableUpgradeable",permalink:"/docs/developers/contracts/OwnerPausableUpgradeable"}},l=[{value:"Functions",id:"functions",children:[{value:"within1",id:"within1",children:[]},{value:"difference",id:"difference",children:[]},{value:"_difference",id:"_difference",children:[]}]}],o={toc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,"A library to be used in conjunction with SafeMath. Contains functions for calculating\ndifferences between two uint256."),Object(b.b)("h2",{id:"functions"},"Functions"),Object(b.b)("h3",{id:"within1"},"within1"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-solidity"},"  function within1(\n    uint256 a,\n    uint256 b\n  ) external returns (bool)\n")),Object(b.b)("p",null,"Compares a and b and returns true if the difference between a and b\nis less than 1 or equal to each other."),Object(b.b)("h4",{id:"parameters"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"a")),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256"),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256 to compare with")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"b")),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256"),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256 to compare with")))),Object(b.b)("h4",{id:"return-values"},"Return Values:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"True")),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256"),Object(b.b)("td",{parentName:"tr",align:"left"},"if the difference between a and b is less than 1 or equal,")))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre"},"    otherwise return false\n")),Object(b.b)("h3",{id:"difference"},"difference"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-solidity"},"  function difference(\n    uint256 a,\n    uint256 b\n  ) external returns (uint256)\n")),Object(b.b)("p",null,"Calculates absolute difference between a and b"),Object(b.b)("h4",{id:"parameters-1"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"a")),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256"),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256 to compare with")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"b")),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256"),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256 to compare with")))),Object(b.b)("h4",{id:"return-values-1"},"Return Values:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"Difference")),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256"),Object(b.b)("td",{parentName:"tr",align:"left"},"between a and b")))),Object(b.b)("h3",{id:"_difference"},"_difference"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-solidity"},"  function _difference(\n    uint256 a,\n    uint256 b\n  ) internal returns (uint256)\n")),Object(b.b)("p",null,"Calculates absolute difference between a and b"),Object(b.b)("h4",{id:"parameters-2"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"a")),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256"),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256 to compare with")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"b")),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256"),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256 to compare with")))),Object(b.b)("h4",{id:"return-values-2"},"Return Values:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"Difference")),Object(b.b)("td",{parentName:"tr",align:"left"},"uint256"),Object(b.b)("td",{parentName:"tr",align:"left"},"between a and b")))))}p.isMDXComponent=!0}}]);